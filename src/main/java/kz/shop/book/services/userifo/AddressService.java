package kz.shop.book.services.userifo;

import kz.shop.book.dto.location.CityLoacalDto;
import kz.shop.book.dto.userInfo.AddressCoordinatesDTO;
import kz.shop.book.dto.userInfo.AddressDTO;
import kz.shop.book.entities.userinfo.Address;
import kz.shop.book.entities.userinfo.Profile;
import kz.shop.book.enums.LanguageName;
import kz.shop.book.repository.location.CityRepository;
import kz.shop.book.repository.userinfo.AddressRepository;
import kz.shop.book.services.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
public class AddressService {
    private final AddressRepository addressRepository;

    private final UserService userService;

    private final CityRepository cityRepository;

    public List<AddressDTO> getAddressDtoListByProfile(UUID profileId) {
        return addressRepository.findByProfileId(profileId).stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }
    public List<AddressDTO> getAddressDtoListByToken(String token) {
        Profile profile = userService.getProfileByToken(token);
        if (profile == null) {
            throw new RuntimeException("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: " + token);
        };
        return getAddressDtoListByProfile(profile.getId());
    }

    public AddressDTO addAddressToProfileByToken(String token, AddressDTO addressDTO) {
        Profile profile = userService.getProfileByToken(token);
        if (profile == null) {
            throw new RuntimeException("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: " + token);
        }
        return addAddressToProfile(profile, addressDTO);
    }

    @Transactional
    public AddressDTO addAddressToProfile(Profile profile, AddressDTO addressDTO) {
        log.info("üè† –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å: {}", profile.getId());

        if (addressDTO.getCityCode() == null || addressDTO.getCityCode().isBlank()) {
            log.warn("‚ö†Ô∏è –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ —É–∫–∞–∑–∞–Ω!");
            throw new IllegalArgumentException("–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
        }
        var city =  cityRepository.findById(addressDTO.getCityCode());
        if (!city.isPresent()) {
            log.warn("‚ö†Ô∏è –∫–æ–¥ –≥–æ—Ä–æ–¥–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω!");
            throw new IllegalArgumentException(" –∫–æ–¥ –≥–æ—Ä–æ–¥–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω!");
        }
        Address address = convertToEntity(addressDTO);
        address.setProfile(profile);
        address.setCity(city.get());
        return convertToDTO(addressRepository.save(address));
    }


    public AddressDTO updateAddressByToken(String token, AddressDTO addressDTO) {
        Profile profile = userService.getProfileByToken(token);
        if (profile == null) {
            throw new RuntimeException("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: " + token);
        };
        return updateAddress(profile, addressDTO);
    }
    @Transactional
    public AddressDTO updateAddress(Profile profile, AddressDTO addressDTO) {
        var city = cityRepository.findById(addressDTO.getCityCode()).orElse(null);
        Address address = addressRepository.findById(addressDTO.getId())


                .orElseThrow(() -> new RuntimeException("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        if (address.getProfile().getId().equals(profile.getId())) {
            address.setStreetAddress(addressDTO.getStreetAddress());
            address.setPostalCode(addressDTO.getPostalCode());
            address.setLatitude(addressDTO.getLatitude());
            address.setLongitude(addressDTO.getLongitude());
            address.setIsPublic(addressDTO.getIsPublic());
        }
        if (city!=null){
        if (!address.getCity().getCityCode().equals(addressDTO.getCityCode())) {
            if (city==null) {
                log.warn("‚ö†Ô∏è –∫–æ–¥ –≥–æ—Ä–æ–¥–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω!");
                throw new IllegalArgumentException(" –∫–æ–¥ –≥–æ—Ä–æ–¥–∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω!");
            } else {
                address.setCity(city);
            }
        }}
        return convertToDTO(addressRepository.save(address));
    }

    /**
     * üóë –£–¥–∞–ª—è–µ—Ç –∞–¥—Ä–µ—Å –ø–æ ID
     */
    @Transactional
    public void deleteAddress(Long addressId) {
        addressRepository.deleteById(addressId);
    }

    /**
     * üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è `Address` ‚Üí `AddressDTO`
     */
    private AddressDTO convertToDTO(Address address) {
        return AddressDTO.builder()
                .id(address.getId())
                .streetAddress(address.getStreetAddress())
                .postalCode(address.getPostalCode())
                .latitude(address.getLatitude())
                .longitude(address.getLongitude())
                .isPublic(address.getIsPublic())
                .cityCode(address.getCity().getCityCode())
                .build();
    }

    /**
     * üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è `AddressDTO` ‚Üí `Address`
     */
    private Address convertToEntity(AddressDTO dto) {
        Address address = new Address();
        address.setStreetAddress(dto.getStreetAddress());
        address.setPostalCode(dto.getPostalCode());
        address.setLatitude(dto.getLatitude());
        address.setLongitude(dto.getLongitude());
        address.setIsPublic(dto.getIsPublic());
        return address;
    }

    /**
     * üó∫ –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É) –¥–ª—è –∞–¥—Ä–µ—Å–∞ –ø–æ ID
     */
    @Transactional
    public void updateCoordinates(Long addressId, Double latitude, Double longitude) {
        int updatedRows = addressRepository.updateCoordinatesById(addressId, latitude, longitude);
        if (updatedRows == 0) {
            throw new RuntimeException("–ê–¥—Ä–µ—Å —Å ID " + addressId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }
    @Transactional
    public void clearCoordinates(Long addressId) {
        int updatedRows = addressRepository.clearCoordinatesById(addressId);
        if (updatedRows == 0) {
            throw new RuntimeException("–ê–¥—Ä–µ—Å —Å ID " + addressId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }

    public AddressCoordinatesDTO getAddressCoordinatesDTOByProfile(Long adressId) {
        var address = addressRepository.findById(adressId).orElse(null);
        if (address!=null) {
         return    AddressCoordinatesDTO.builder()
                    .latitude(address.getLatitude())
                    .longitude(address.getLongitude())
                    .title(address.getStreetAddress().concat(" ".concat(address.getPostalCode())) )
                    .build();
        }
        return AddressCoordinatesDTO.builder().build();
    }


    public List<CityLoacalDto> getPublicCities(LanguageName preferredLanguage) {
        return cityRepository.findByIsPublicTrue().stream()
                .map(item -> CityLoacalDto.builder()
                        .cityCode(item.getCityCode())
                        .name(item.getLocalizedName(preferredLanguage))
                        .build()
                )
                .collect(Collectors.toList()); // –£–±—Ä–∞–Ω–∞ –ª–∏—à–Ω—è—è —Å–∫–æ–±–∫–∞
    }

}