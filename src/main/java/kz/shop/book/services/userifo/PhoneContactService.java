package kz.shop.book.services.userifo;


import kz.shop.book.dto.userInfo.PhoneContactDTO;
import kz.shop.book.entities.userinfo.PhoneContact;
import kz.shop.book.entities.userinfo.Profile;
import kz.shop.book.repository.userinfo.PhoneContactRepository;
import kz.shop.book.services.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
public class PhoneContactService {
    private final PhoneContactRepository phoneContactRepository;

    private final UserService userService;
    /**
     * üîç –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ `profileId`
     */
    public List<PhoneContactDTO> getContactsByProfile(UUID profileId) {
        return phoneContactRepository.findByProfileId(profileId).stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    public List<PhoneContactDTO> getContactsByTokenProfile(String token) {
        Profile profile = userService.getProfileByToken(token);
        if (profile == null) {
            throw new RuntimeException("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: " + token);
        }
        return getContactsByProfile(profile.getId());
    }

    @Transactional
    public PhoneContactDTO addPhoneToProfile(String token,  PhoneContactDTO phoneDTO) {
        log.info("üìû –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å: {}", phoneDTO.getPhoneNumber());
        Profile profile = userService.getProfileByToken(token);
        if (profile == null) {
            throw new RuntimeException("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞: " + token);
        };
        boolean exists = phoneContactRepository.existsByPhoneNumberAndProfile(phoneDTO.getPhoneNumber(), profile);
        if (exists) {
            log.warn("‚ö†Ô∏è –ù–æ–º–µ—Ä {} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ ID {}", phoneDTO.getPhoneNumber(), profile.getId());
            throw new RuntimeException("–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω");
        }
        PhoneContact phoneContact = convertToEntity(phoneDTO);
        phoneContact.setProfile(profile);
        return convertToDTO(phoneContactRepository.save(phoneContact));
    }

    @Transactional
    public PhoneContactDTO updatePhone(Long phoneId, PhoneContactDTO phoneDTO) {
        PhoneContact phoneContact = phoneContactRepository.findById(phoneId)
                .orElseThrow(() -> new RuntimeException("–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        phoneContact.setPhoneNumber(phoneDTO.getPhoneNumber());
        phoneContact.setIsPublic(phoneDTO.getIsPublic());
        phoneContact.setType(phoneDTO.getType());

        return convertToDTO(phoneContactRepository.save(phoneContact));
    }

    @Transactional
    public void deletePhone(Long phoneId) {
        phoneContactRepository.deleteById(phoneId);
    }

    /**
     * üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è `PhoneContact` ‚Üí `PhoneContactDTO`
     */
    private PhoneContactDTO convertToDTO(PhoneContact phone) {
        return PhoneContactDTO.builder()
                .id(phone.getId())
                .phoneNumber(phone.getPhoneNumber())
                .isPublic(phone.getIsPublic())
                .type(phone.getType())
                .build();
    }

    /**
     * üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è `PhoneContactDTO` ‚Üí `PhoneContact`
     */
    private PhoneContact convertToEntity(PhoneContactDTO dto) {
        PhoneContact phone = new PhoneContact();
        phone.setPhoneNumber(dto.getPhoneNumber());
        phone.setIsPublic(dto.getIsPublic());
        phone.setType(dto.getType());
        return phone;
    }
}
