package kz.shop.book.controllers;


import kz.shop.book.dto.location.CityLoacalDto;
import kz.shop.book.dto.userInfo.*;
import kz.shop.book.services.userifo.ProfileService;
import kz.shop.book.services.userifo.PhoneContactService;
import kz.shop.book.services.userifo.AddressService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/profile")
@RequiredArgsConstructor
@Slf4j // ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
public class UserProfileController {

    private final ProfileService profileService;
    private final PhoneContactService phoneContactService;
    private final AddressService addressService;


    /**
     * üåê –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤  –ø–æ —Ç–æ–∫–µ–Ω—É
     */
    @GetMapping("/cities")
    public ResponseEntity<List<CityLoacalDto>> getAllCityLocalDto(@RequestHeader(name = "Authorization") String authHeader) {
        String token = extractToken(authHeader);
        return ResponseEntity.ok(profileService.getAllCityLoacalDto(token));
    }

    /**
     * üîç –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —Ç–æ–∫–µ–Ω—É
     */
    @GetMapping
    public ResponseEntity<ProfileDTO> getProfile(@RequestHeader(name = "Authorization") String authHeader) {
        String token = extractToken(authHeader);
        return ResponseEntity.ok(profileService.getProfileDtoForOwner(token));
    }

    /**
     * üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
     */
    @PutMapping
    public ResponseEntity<ProfileDTO> updateProfile(
            @RequestHeader(name = "Authorization") String authHeader,
            @RequestBody ProfileDTO profileDTO) {
        String token = extractToken(authHeader);
        return ResponseEntity.ok(profileService.updateProfileByOwner(token, profileDTO));
    }



    /**
     * üåê –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
     */
    @GetMapping("/languages")
    public ResponseEntity<List<LanguageDTO>> getLanguages(@RequestHeader(name = "Authorization") String authHeader) {
        String token = extractToken(authHeader);
        return ResponseEntity.ok(profileService.getLanguageDtoByOwner(token));
    }

    /**
     * üí∞ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç
     */
    @GetMapping("/currencies")
    public ResponseEntity<List<CurrencyDTO>> getCurrencies(@RequestHeader(name = "Authorization") String authHeader) {
        String token = extractToken(authHeader);
        return ResponseEntity.ok(profileService.getAllCurrencyDtoByOwner(token));
    }

    /**
     * üìû –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
     */
    @GetMapping("/phones")
    public ResponseEntity<List<PhoneContactDTO>> getPhoneContacts(@RequestHeader(name = "Authorization") String authHeader) {
        String token = extractToken(authHeader);
        return ResponseEntity.ok(phoneContactService.getContactsByTokenProfile(token));
    }

    /**
     * ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
     */
    @PostMapping("/phones")
    public ResponseEntity<PhoneContactDTO> addPhone(
            @RequestHeader(name = "Authorization") String authHeader,
            @RequestBody PhoneContactDTO phoneDTO) {
        String token = extractToken(authHeader);
        return ResponseEntity.ok(phoneContactService.addPhoneToProfile(token, phoneDTO));
    }

    /**
     * ‚úè –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
     */
    @PutMapping("/phones/{phoneId}")
    public ResponseEntity<PhoneContactDTO> updatePhone(
            @PathVariable Long phoneId,
            @RequestBody PhoneContactDTO phoneDTO) {
        return ResponseEntity.ok(phoneContactService.updatePhone(phoneId, phoneDTO));
    }

    /**
     * üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
     */
    @DeleteMapping("/phones/{phoneId}")
    public ResponseEntity<Void> deletePhone(@PathVariable Long phoneId) {
        phoneContactService.deletePhone(phoneId);
        return ResponseEntity.noContent().build();
    }

    /**
     * üè† –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
     */
    @GetMapping("/addresses")
    public ResponseEntity<List<AddressDTO>> getAddresses(@RequestHeader(name = "Authorization") String authHeader) {
        String token = extractToken(authHeader);
        return ResponseEntity.ok(addressService.getAddressDtoListByToken(token));
    }

    /**
     * ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å
     */
    @PostMapping("/addresses")
    public ResponseEntity<AddressDTO> addAddress(
            @RequestHeader(name = "Authorization") String authHeader,
            @RequestBody AddressDTO addressDTO) {
        String token = extractToken(authHeader);
        return ResponseEntity.ok(addressService.addAddressToProfileByToken(token, addressDTO));
    }

    /**
     * ‚úè –û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å
     */
    @PutMapping("/addresses/{addressId}")
    public ResponseEntity<AddressDTO> updateAddress(
            @RequestHeader(name = "Authorization") String authHeader,
            @PathVariable Long addressId,
            @RequestBody AddressDTO addressDTO) {
        String token = extractToken(authHeader);
        addressDTO.setId(addressId);
        return ResponseEntity.ok(addressService.updateAddressByToken(token, addressDTO));
    }

    /**
     * üóë –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å
     */
    @DeleteMapping("/addresses/{addressId}")
    public ResponseEntity<Void> deleteAddress(@PathVariable Long addressId) {
        addressService.deleteAddress(addressId);
        return ResponseEntity.noContent().build();
    }

    /**
     * üéØ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
     */
    private String extractToken(String authHeader) {
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            throw new RuntimeException("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω");
        }
        return authHeader.substring(7); // –£–±–∏—Ä–∞–µ–º "Bearer "
    }
}
